#!/bin/bash

#—————————————————————————————————————————————————————————————————————
# Invoke `flower/foo.js` from the CLI using `flower invoke foo`:
#—————————————————————————————————————————————————————————————————————
function flower:invoke() {
  node -e 'require("flower").__invoke__()' -- "$@"
}

function flower:log() {
  flower:invoke log "$@"
}

#—————————————————————————————————————————————————————————————————————
# Main entry point: `flower` (or `flower dwim`)
#—————————————————————————————————————————————————————————————————————

if [[ "$1" =~ ^[^-] ]]; then
  command="$1"; shift
else
  command=dwim
fi

function flower:dwim() {
  flower:ensure-port
  [[ -d ~/.pow ]] && flower:pow --silent

  if [[ -f package.json ]]; then
    flower:log \
'Found `package.json`.
Will delegate app launch to `npm`.'
    flower:with-ps1 npm start
  elif [[ -f app.js || -f server.js ]]; then
    flower:log \
'No `package.json` found, but found `'$((-f app.js ? app.js : server.js))'`.
Will launch your app directly.'
    flower:with-ps1 node server.js
  else
    flower:log \
'No `package.json`, nor any `app.js`/`server.js` found.
Will use standard-issue Flower server.'
    flower:with-ps1 flower server
  fi
}

function flower:server() {
  flower:ensure-port
  flower:with-ps1 node -e 'require("flower").listen()'
}

function flower:ensure-port() {
  [[ $PORT ]] || [[ -f .port ]] || flower:pick-port
}

function flower:ensure-port-file() {
  [[ -f .port ]] || flower:with-ps1 flower pick-port
}

function flower:pick-port() {
  set -e

  flower:log 'Picking random available port...'
  flower:invoke get-random-port > .port
  flower:with-ps1 cat .port
  flower:log 'Tip: Add `.port` to your `.gitignore`.'
}

#—————————————————————————————————————————————————————————————————————
# Pow
#—————————————————————————————————————————————————————————————————————
function flower:pow() {
  set -e

  flower:ensure-port-file

  name=$(basename "$PWD")
  symlink=~/.pow/"$name"
  portfile="$PWD/.port"

  function print-instructions() {
    flower:log "Pow URL: <http://${name}.dev/>"'

!!Note:!! Pow 0.4 is needed for this to work.
``git clone https://github.com/37signals/pow.git``
``cd pow; cake install; cake stop; cake start``'
  }

  if [[ $(readlink "$symlink") = $portfile ]]; then
    if [[ "$1" != --silent ]]; then
      flower:with-ps1 ls -lh "$symlink"
      flower:log "Application already linked to Pow."
      print-instructions
    fi
  else
    flower:log "Linking application to Pow..."
    flower:with-ps1 ln -f -s "$portfile" "$symlink"
    print-instructions
  fi
}

#—————————————————————————————————————————————————————————————————————
# Nifty hack for $PS1-enabled logging of subcommands
#—————————————————————————————————————————————————————————————————————
function flower:with-ps1() {
  if [[ "$1 $2" = "sh -c" ]]; then
    command="$3"
  else
    command=$(printf '%q ' "$@")
  fi

  echo "$(flower:get-ps1)"$'\e[90m'"$command"$'\e[0m'
  "$@"
}

function flower:get-ps1() {
  echo : CUT-HERE |
  bash -i 3>&1 >/dev/null 2>&3 |
  perl -0777 -ne '
    s/[\s\S]*CUT-HERE\n([\s\S]*)exit\Z/$1/;
    print substr($_, 0, -1)
  '
}

#—————————————————————————————————————————————————————————————————————
"flower:$command" "$@"
#—————————————————————————————————————————————————————————————————————
